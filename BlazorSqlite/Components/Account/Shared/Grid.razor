@typeparam TItem

@{
    RenderFragment CreateCard() =>
    @<div class="@CssClassHelper.Combine("grid",
                                        GridContentNavigationMode == GridContentNavigationMode.LoadMore && OnlyShowLoadMoreAtBottomOfScroll ? "grid-load-more" : "",
                                        ShowCardHeader ? "" : "hide-card-header")">

        <HxCard CssClass="@(chips.Any()?"pad-for-chips":"")"
                HeaderCssClass="@(ShowGridTitle ? "" : "no-visible-grid-title")">
            <HeaderTemplate>
                <div class="d-flex justify-content-between gap-2 align-items-center">
                    <div class="d-flex gap-5">
                        <h5 class="card-title d-flex align-items-center">
                            @Title
                            @if (ShowBadgeCount)
                        {
                            <span class="badge grid-title-badge bg-secondary">@BadgeCount</span>
                        }
                        </h5>
                        @CommandsTemplateStart
                    </div>
                    <div class="d-flex gap-2 align-items-center">
                        @if (SearchBoxLocation == SearchBoxLocationEnum.Start)
                    {
                        @if(ShowRefreshButton)
                    {
                        <HxButton Color="ThemeColor.None"
                                  CssClass="btn-flat"
                                  Icon="BootstrapIcon.ArrowClockwise"
                                  OnClick="Refresh" />
                    }
                        @if (CommandsTemplate != null)
                    {

                        @CommandsTemplate
                    }

                    }
                    else if (SearchBoxLocation == SearchBoxLocationEnum.End)
                    {
                        @if(ShowRefreshButton)
                    {
                        <HxButton Color="ThemeColor.None"
                                  CssClass="btn-flat"
                                  Icon="BootstrapIcon.ArrowClockwise"
                                  OnClick="Refresh" />
                    }
                        @if (CommandsTemplate != null)
                    {
                        @CommandsTemplate
                    }
                    }

                        @if (EllipseTemplate != null)
                    {
                        @EllipseTemplate
                    }
                    </div>
                </div>
            </HeaderTemplate>
            <BodyTemplate>
                @if (FilterEnabled || ColumnSelectionEnabled)
            {
                <div class="filter-columnselect">
                    <div class="d-flex align-items-center">
                        @if (FilterEnabled)
                    {
                        <HxButton Icon="BootstrapIcon.Filter"
                                  CssClass="icon-only"
                                  OnClick="ShowFilter"
                                  Size="@buttonSize">
                            @if (!chips.Any())
                        {
                            <small>Filter</small>
                        }
                        </HxButton>
                        @if (chips.Any())
                    {
                        <div style="padding: 0.375rem 0;">
                            <HxChipList Chips="@chips"
                                        OnChipRemoveClick="HandleRemoveChip" />
                        </div>
                    }
                    }

                    </div>

                    @if (ColumnSelectionEnabled)
                {
                    <HxButton Icon="BootstrapIcon.LayoutThreeColumns"
                              CssClass="icon-only"
                              OnClick="@(()=>offcanvasColumnSelect.ShowNullSafe())"
                              Size="@buttonSize" />
                }
                </div>
            }
                @if (FooterModel != null)
            {
                <EditForm Model="@FooterModel" class="wrapped-form">
                    <DataAnnotationsValidator />

                    @CreateGrid()
                </EditForm>
            }
            else
            {
                @CreateGrid()
            }
            </BodyTemplate>
        </HxCard>
    </div>;


    RenderFragment CreateGrid() =>
    @<HxGrid TableCssClass="@CssClassHelper.Combine("table-sm",
                                            "table-striped",
                                            "stickyheader",
                                            "main-table",
                                            ShowHeader?"":"no-header",
                                            MultiSelectionEnabled ? "multiselect multiselect-sm":"",
                                            DisableTextWrapping?"no-wrap":"")"
                 Responsive="true"
                 PageSize="@PageSize"
                 DataProvider="GetGridData"
                 TItem="TItem"
                 MultiSelectionEnabled="@MultiSelectionEnabled"
                 SelectionEnabled="@SelectionEnabled"
                 SelectedDataItem="SelectedItem"
                 SelectedDataItems="SelectedItems"
                 SelectedDataItemChanged="HandleSelectedDataItemChanged"
                 SelectedDataItemsChanged="HandleSelectedDataItemsChanged"
                 ShowFooterWhenEmptyData="true"
                 ItemRowCssClassSelector="@ItemRowCssClassSelector"
                 ContentNavigationMode="@GridContentNavigationMode"
                 @ref="_grid">
        <EmptyDataTemplate>
            @if (EmptyDataTemplate != null)
        {
            @EmptyDataTemplate
        }
        else
        {
            <HxGridEmptyDataTemplateDefaultContent />
        }
        </EmptyDataTemplate>
        <Columns>
            @if (Columns != null)
        {
            @Columns
        }
        </Columns>
        <LoadMoreTemplate Context="grid">
            @if(LoadMoreTemplate != null)
        {
            @LoadMoreTemplate(grid)
        }

        </LoadMoreTemplate>
    </HxGrid>;
}

<div class="@CssClassHelper.Combine(ComponentName,
                                    ShowBorder ? "" : "hide-border",
                                    AdditionalCss)"
     @attributes="divContainerAttributes">

    @if (SideCarEnabled)
    {
        <SplitZone>
            <Horizontal GutterBorderLeft="true">
                <Split Size="80">
                    @CreateCard()
                </Split>

                <Split Size="20" MinSizePx="410">
                    <div class="sidecar">
                        <div class="sidecar-detail">
                            <div class="sidecar-detail-header">
                                @SideCarHeader
                            </div>
                            <div class="@CssClassHelper.Combine("sidecar-detail-info",PadSideCar?"p-3":"")">
                                @SideCarDetail
                            </div>
                        </div>
                    </div>
                </Split>
            </Horizontal>
        </SplitZone>
    }
    else
    {
        @CreateCard()
    }
</div>