@page "/table/{DbPath}/{TableName}"
@using Microsoft.Data.Sqlite

@rendermode InteractiveServer

<h3>Table: @TableName</h3>

@if (rows != null && rows.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                @foreach (var column in columns)
                {
                    <th>@column</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var row in rows)
            {
                <tr>
                    @foreach (var cell in row)
                    {
                        <td>@cell</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading table content...</p>
}

@code {
    [Parameter]
    public string DbPath { get; set; }
    [Parameter]
    public string TableName { get; set; }

    private List<string> columns = new List<string>();
    private List<List<object>> rows = new List<List<object>>();

    protected override void OnParametersSet()
    {
        LoadTableContent();
    }

    private void LoadTableContent()
    {
        if (string.IsNullOrWhiteSpace(DbPath) || string.IsNullOrWhiteSpace(TableName)) return;

        using var connection = new SqliteConnection($"Data Source={DbPath}");
        connection.Open();

        using var command = new SqliteCommand($"SELECT * FROM {TableName};", connection);
        using var reader = command.ExecuteReader();

        columns.Clear();
        for (int i = 0; i < reader.FieldCount; i++)
        {
            columns.Add(reader.GetName(i));
        }

        rows.Clear();
        while (reader.Read())
        {
            var row = new List<object>();
            for (int i = 0; i < reader.FieldCount; i++)
            {
                row.Add(reader.GetValue(i));
            }
            rows.Add(row);
        }
    }
}
